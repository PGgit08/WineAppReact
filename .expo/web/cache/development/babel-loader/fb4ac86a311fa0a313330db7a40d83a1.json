{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _storage = require(\"../storage\");\n\nvar _auth_requests = _interopRequireDefault(require(\"../api_handling/auth_requests\"));\n\nvar IdentifyUser = function IdentifyUser(dispatch) {\n  return function (jwt) {};\n};\n\nvar Context_SignIn = function Context_SignIn(dispatch) {\n  return function _callee(_ref) {\n    var username, password;\n    return _regenerator.default.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            username = _ref.username, password = _ref.password;\n            _context.next = 3;\n            return _regenerator.default.awrap(_auth_requests.default.login({\n              username: username,\n              password: password\n            }).then(function (res) {\n              dispatch({\n                type: 'sign_in',\n                val: res.data\n              });\n              (0, _storage.SignIn)(res.data);\n            }).catch(Backend_Update(dispatch)));\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar Context_Register = function Context_Register(dispatch) {\n  return function _callee2(_ref2) {\n    var username, password, email;\n    return _regenerator.default.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            username = _ref2.username, password = _ref2.password, email = _ref2.email;\n            _context2.next = 3;\n            return _regenerator.default.awrap(_auth_requests.default.register({\n              username: username,\n              password: password,\n              email: email\n            }).then(function (res) {\n              dispatch({\n                type: 'sign_in',\n                val: res.data\n              });\n              (0, _storage.SignIn)(res.data);\n            }).catch(console.log('eror')));\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar Context_SignOut = function Context_SignOut(dispatch) {\n  return function () {\n    dispatch({\n      type: 'sign_out'\n    });\n    (0, _storage.SignOut)();\n  };\n};\n\nvar checkJWT = function checkJWT(dispatch) {\n  return _regenerator.default.async(function checkJWT$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          return _context4.abrupt(\"return\", function _callee3() {\n            return _regenerator.default.async(function _callee3$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    _context3.next = 2;\n                    return _regenerator.default.awrap((0, _storage.Init)().then(function (val) {\n                      console.log(val);\n                      dispatch({\n                        type: 'sign_in',\n                        val: val\n                      });\n                    }).catch(function (err) {\n                      console.log(err);\n                    }));\n\n                  case 2:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          });\n\n        case 1:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar setStoreId = function setStoreId(dispatch) {\n  return function (store_id) {\n    dispatch({\n      type: 'setStoreId',\n      val: store_id\n    });\n  };\n};\n\nvar Backend_Update = function Backend_Update(dispatch) {\n  return function (errorObj) {\n    dispatch({\n      type: \"Backend_Update\",\n      val: {\n        isError: errorObj.isError,\n        errorMsg: errorObj.errorMsg\n      }\n    });\n  };\n};\n\nvar Backend_Refresh = function Backend_Refresh(dispatch) {\n  return function () {\n    dispatch({\n      type: \"Backend_Refresh\"\n    });\n  };\n};\n\nvar _default = {\n  IdentifyUser: IdentifyUser,\n  Context_SignIn: Context_SignIn,\n  Context_SignOut: Context_SignOut,\n  Context_Register: Context_Register,\n  checkJWT: checkJWT,\n  setStoreId: setStoreId,\n  Backend_Update: Backend_Update,\n  Backend_Refresh: Backend_Refresh\n};\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/peter/Peter-First-App/src/contexts/main_context_actions.js"],"names":["IdentifyUser","dispatch","jwt","Context_SignIn","username","password","AUTH_API","login","then","res","type","val","data","catch","Backend_Update","Context_Register","email","register","console","log","Context_SignOut","checkJWT","err","setStoreId","store_id","errorObj","isError","errorMsg","Backend_Refresh"],"mappings":"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","sourcesContent":["// storage imports\r\nimport {\r\n    SignIn,\r\n    SignOut,\r\n    Init\r\n} from '../storage';\r\n\r\n\r\n// api request imports\r\nimport { default as AUTH_API } from '../api_handling/auth_requests';\r\n\r\n// functions that change main_context's state\r\n// screens can import these functions really easily\r\n// and they can be used as event handlers\r\n\r\n// function to identify user based on \r\n// jwt\r\nconst IdentifyUser = dispatch => {\r\n    // send jwt as param\r\n    return (jwt) => {\r\n        // api request\r\n        // to identify person\r\n        // and get their posts + creds\r\n    };\r\n};\r\n\r\nconst Context_SignIn = dispatch => {\r\n    // return function explained in main_context\r\n    return async ({username, password}) => {\r\n        // api request\r\n        // try doing log in\r\n        await AUTH_API.login({username, password}).then(\r\n            (res) => {\r\n                dispatch({\r\n                    type:'sign_in',\r\n                    val: res.data\r\n                });\r\n\r\n                SignIn(res.data);\r\n            }\r\n        ).catch(Backend_Update(dispatch));\r\n    };\r\n};\r\n\r\n\r\nconst Context_Register = dispatch => {\r\n    return async ({username, password, email}) => {\r\n        await AUTH_API.register({username, password, email}).then(\r\n            (res) => {\r\n                dispatch({\r\n                    type: 'sign_in',\r\n                    val: res.data\r\n                });\r\n\r\n                SignIn(res.data);\r\n            }\r\n        ).catch(console.log('eror'));\r\n    };\r\n};\r\n\r\nconst Context_SignOut = dispatch => {\r\n    return () => {\r\n        // context signout\r\n        dispatch({\r\n            type: 'sign_out'\r\n        });\r\n        // storage signout\r\n        SignOut();\r\n    };\r\n};\r\n\r\nconst checkJWT = async dispatch => {\r\n    return async () => {\r\n        // check for token \r\n        // asyncronously\r\n        await Init().then((val) => {\r\n            // even if val is null\r\n            // the jwt will still be set to null\r\n            console.log(val);\r\n            dispatch({\r\n                type: 'sign_in',\r\n                val: val\r\n            });\r\n        }).catch((err) => {\r\n            console.log(err);\r\n        });\r\n    };\r\n};\r\n\r\nconst setStoreId = dispatch => {\r\n    return (store_id) => {\r\n        dispatch({\r\n            type: 'setStoreId',\r\n            val: store_id\r\n        });\r\n    };\r\n};\r\n\r\nconst Backend_Update = dispatch => {\r\n    return (errorObj) => {\r\n        dispatch({\r\n            type: \"Backend_Update\",\r\n            val: {\r\n                isError: errorObj.isError,\r\n                errorMsg: errorObj.errorMsg\r\n            }\r\n        });\r\n    };\r\n};\r\n\r\nconst Backend_Refresh = dispatch => {\r\n    return () => {\r\n        dispatch({\r\n            type: \"Backend_Refresh\"\r\n        });\r\n    };\r\n};\r\n\r\n// export all the functions\r\nexport default {\r\n    IdentifyUser,\r\n    Context_SignIn,\r\n    Context_SignOut,\r\n    Context_Register,\r\n    checkJWT,\r\n    setStoreId,\r\n    Backend_Update,\r\n    Backend_Refresh\r\n};"]},"metadata":{},"sourceType":"script"}