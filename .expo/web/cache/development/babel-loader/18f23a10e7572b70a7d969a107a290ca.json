{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _storage = require(\"../storage\");\n\nvar _axios = _interopRequireDefault(require(\"axios\"));\n\nvar _config = require(\"../config\");\n\nvar Context_SignIn = function Context_SignIn(dispatch) {\n  return function (_ref) {\n    var username = _ref.username,\n        password = _ref.password;\n\n    _axios.default.get(_config.AUTH_ENDPOINTS.login, {\n      params: {\n        username: username,\n        password: password\n      }\n    }).then(function (res) {\n      (0, _storage.SignIn)(res.data);\n      dispatch({\n        type: 'sign_in',\n        val: res.data\n      });\n    }).catch(function (err) {\n      console.log(err);\n    });\n  };\n};\n\nvar Context_SignOut = function Context_SignOut(dispatch) {\n  return function () {\n    (0, _storage.SignOut)();\n    dispatch({\n      type: 'sign_out'\n    });\n  };\n};\n\nvar checkJWT = function checkJWT(dispatch) {\n  return function () {\n    (0, _storage.Init)().then(function (val) {\n      dispatch({\n        type: 'sign_in',\n        val: val\n      });\n    }).catch(function (err) {\n      console.log(err);\n    });\n  };\n};\n\nvar setStoreId = function setStoreId(dispatch) {\n  return function (store_id) {\n    dispatch({\n      type: 'setStoreId',\n      val: store_id\n    });\n  };\n};\n\nvar _default = {\n  Context_SignIn: Context_SignIn,\n  Context_SignOut: Context_SignOut,\n  checkJWT: checkJWT,\n  setStoreId: setStoreId\n};\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/peter/Peter-First-App/src/contexts/main_context_actions.js"],"names":["Context_SignIn","dispatch","username","password","axios","get","AUTH_ENDPOINTS","login","params","then","res","data","type","val","catch","err","console","log","Context_SignOut","checkJWT","setStoreId","store_id"],"mappings":";;;;;;;AACA;;AAOA;;AAGA;;AAMA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,QAAQ,EAAI;AAE/B,SAAO,gBAA0B;AAAA,QAAxBC,QAAwB,QAAxBA,QAAwB;AAAA,QAAdC,QAAc,QAAdA,QAAc;;AAG7BC,mBAAMC,GAAN,CAAUC,uBAAeC,KAAzB,EAAgC;AAC5BC,MAAAA,MAAM,EAAE;AACJN,QAAAA,QAAQ,EAAEA,QADN;AAEJC,QAAAA,QAAQ,EAAEA;AAFN;AADoB,KAAhC,EAKGM,IALH,CAMI,UAACC,GAAD,EAAS;AAEL,2BAAOA,GAAG,CAACC,IAAX;AAGAV,MAAAA,QAAQ,CAAC;AACLW,QAAAA,IAAI,EAAE,SADD;AAELC,QAAAA,GAAG,EAAEH,GAAG,CAACC;AAFJ,OAAD,CAAR;AAIH,KAfL,EAgBEG,KAhBF,CAiBI,UAACC,GAAD,EAAS;AAACC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AAAiB,KAjB/B;AAmBH,GAtBD;AAuBH,CAzBD;;AA2BA,IAAMG,eAAe,GAAG,SAAlBA,eAAkB,CAAAjB,QAAQ,EAAI;AAChC,SAAO,YAAM;AAET;AAEAA,IAAAA,QAAQ,CAAC;AACLW,MAAAA,IAAI,EAAE;AADD,KAAD,CAAR;AAGH,GAPD;AAQH,CATD;;AAWA,IAAMO,QAAQ,GAAG,SAAXA,QAAW,CAAAlB,QAAQ,EAAI;AACzB,SAAO,YAAM;AAGT,yBAAOQ,IAAP,CAAY,UAACI,GAAD,EAAS;AAGjBZ,MAAAA,QAAQ,CAAC;AACLW,QAAAA,IAAI,EAAE,SADD;AAELC,QAAAA,GAAG,EAAEA;AAFA,OAAD,CAAR;AAIH,KAPD,EAOGC,KAPH,CAOS,UAACC,GAAD,EAAS;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH,KATD;AAUH,GAbD;AAcH,CAfD;;AAiBA,IAAMK,UAAU,GAAG,SAAbA,UAAa,CAAAnB,QAAQ,EAAI;AAC3B,SAAO,UAACoB,QAAD,EAAc;AACjBpB,IAAAA,QAAQ,CAAC;AACLW,MAAAA,IAAI,EAAE,YADD;AAELC,MAAAA,GAAG,EAAEQ;AAFA,KAAD,CAAR;AAIH,GALD;AAMH,CAPD;;eAWe;AACXrB,EAAAA,cAAc,EAAdA,cADW;AAEXkB,EAAAA,eAAe,EAAfA,eAFW;AAGXC,EAAAA,QAAQ,EAARA,QAHW;AAIXC,EAAAA,UAAU,EAAVA;AAJW,C","sourcesContent":["// storage imports\r\nimport {\r\n    SignIn,\r\n    SignOut,\r\n    Init\r\n} from '../storage';\r\n\r\n// api axios import\r\nimport axios from 'axios';\r\n\r\n// config urls\r\nimport { AUTH_ENDPOINTS } from '../config';\r\n\r\n// functions that change main_context's state\r\n// screens can import these functions really easily\r\n// and they can be used as event handlers\r\n\r\nconst Context_SignIn = dispatch => {\r\n    // return function explained in main_context\r\n    return ({username, password}) => {\r\n        // api request\r\n        // try doing log in\r\n        axios.get(AUTH_ENDPOINTS.login, {\r\n            params: {\r\n                username: username, \r\n                password: password\r\n            }\r\n        }).then(\r\n            (res) => {\r\n                // storage sign in\r\n                SignIn(res.data);\r\n                \r\n                // change context state\r\n                dispatch({\r\n                    type: 'sign_in',\r\n                    val: res.data\r\n                });\r\n            }\r\n        ).catch(\r\n            (err) => {console.log(err)}\r\n        );\r\n    };\r\n};\r\n\r\nconst Context_SignOut = dispatch => {\r\n    return () => {\r\n        // storage signout\r\n        SignOut();\r\n        // context signout\r\n        dispatch({\r\n            type: 'sign_out'\r\n        });\r\n    };\r\n};\r\n\r\nconst checkJWT = dispatch => {\r\n    return () => {\r\n        // check for token \r\n        // asyncronously\r\n        Init().then((val) => {\r\n            // even if val is null\r\n            // the jwt will still be set to null\r\n            dispatch({\r\n                type: 'sign_in',\r\n                val: val\r\n            });\r\n        }).catch((err) => {\r\n            console.log(err);\r\n        });\r\n    };\r\n};\r\n\r\nconst setStoreId = dispatch => {\r\n    return (store_id) => {\r\n        dispatch({\r\n            type: 'setStoreId',\r\n            val: store_id\r\n        });\r\n    };\r\n};\r\n\r\n\r\n// export all the functions\r\nexport default {\r\n    Context_SignIn,\r\n    Context_SignOut,\r\n    checkJWT,\r\n    setStoreId\r\n};"]},"metadata":{},"sourceType":"script"}