{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _stack = require(\"@react-navigation/stack\");\n\nvar _navigations = require(\"./src/navigation/navigations\");\n\nvar _main_context = require(\"./src/contexts/main_context\");\n\nvar _reactNative = require(\"react-native\");\n\nvar _ErrorHandler = _interopRequireDefault(require(\"./src/api_handling/ErrorHandler\"));\n\nvar _jsxFileName = \"C:\\\\Users\\\\peter\\\\peter-first-app\\\\index.js\";\nvar AppStack = (0, _stack.createStackNavigator)();\n\nfunction App() {\n  var context = (0, _react.useContext)(_main_context.MainContext);\n  (0, _react.useEffect)(function () {\n    context.actions.checkJWT();\n  }, []);\n  return _react.default.createElement(_native.NavigationContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, _react.default.createElement(AppStack.Navigator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, context.state.jwt === null || context.state.jwt === undefined ? _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(AppStack.Screen, {\n    options: {\n      headerShown: false\n    },\n    name: \"Auth\",\n    component: _navigations.AuthFlow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 25\n    }\n  })) : _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(AppStack.Screen, {\n    options: {\n      headerShown: false\n    },\n    name: \"Home\",\n    component: _navigations.HomeFlow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 25\n    }\n  }))));\n}\n\n;\n\nvar styles = _reactNative.StyleSheet.create({\n  msg: {\n    fontSize: 28\n  },\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\n\nfunction Full_App() {\n  return _react.default.createElement(_main_context.MainProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, _react.default.createElement(_ErrorHandler.default, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }), _react.default.createElement(App, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }));\n}\n\n;\n\n_reactNative.AppRegistry.registerComponent(\"Peter-First-App\", function () {\n  return Full_App;\n});\n\nif (_reactNative.Platform.OS == \"web\") {\n  _reactNative.AppRegistry.runApplication(\"Peter-First-App\", {\n    rootTag: document.getElementById('root')\n  });\n}\n\n;","map":{"version":3,"sources":["C:/Users/peter/peter-first-app/index.js"],"names":["AppStack","App","context","MainContext","actions","checkJWT","state","jwt","undefined","headerShown","AuthFlow","HomeFlow","styles","StyleSheet","create","msg","fontSize","container","flex","justifyContent","alignItems","Full_App","AppRegistry","registerComponent","Platform","OS","runApplication","rootTag","document","getElementById"],"mappings":";;;;AAEA;;AAGA;;AACA;;AAEA;;AAGA;;AAGA;;AASA;;;AAGA,IAAMA,QAAQ,GAAG,kCAAjB;;AAGA,SAASC,GAAT,GAAc;AAEV,MAAMC,OAAO,GAAG,uBAAWC,yBAAX,CAAhB;AAGA,wBAAU,YAAM;AAGZD,IAAAA,OAAO,CAACE,OAAR,CAAgBC,QAAhB;AACH,GAJD,EAIG,EAJH;AAOA,SACI,6BAAC,2BAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,6BAAC,QAAD,CAAU,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKH,OAAO,CAACI,KAAR,CAAcC,GAAd,KAAsB,IAAtB,IAA8BL,OAAO,CAACI,KAAR,CAAcC,GAAd,KAAsBC,SAApD,GACG,4DAEI,6BAAC,QAAD,CAAU,MAAV;AACI,IAAA,OAAO,EAAE;AAACC,MAAAA,WAAW,EAAE;AAAd,KADb;AAEI,IAAA,IAAI,EAAG,MAFX;AAGI,IAAA,SAAS,EAAIC,qBAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADH,GAUG,4DAEI,6BAAC,QAAD,CAAU,MAAV;AACI,IAAA,OAAO,EAAE;AAACD,MAAAA,WAAW,EAAE;AAAd,KADb;AAEI,IAAA,IAAI,EAAG,MAFX;AAGI,IAAA,SAAS,EAAIE,qBAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAXR,CADJ,CADJ;AAyBH;;AAAA;;AAED,IAAMC,MAAM,GAAGC,wBAAWC,MAAX,CAAkB;AAC7BC,EAAAA,GAAG,EAAE;AACHC,IAAAA,QAAQ,EAAE;AADP,GADwB;AAI7BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,cAAc,EAAE,QAFP;AAGTC,IAAAA,UAAU,EAAE;AAHH;AAJkB,CAAlB,CAAf;;AAYA,SAASC,QAAT,GAAmB;AACf,SACI,6BAAC,0BAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,6BAAC,qBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,6BAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ;AAMH;;AAAA;;AAQDC,yBAAYC,iBAAZ,CAA8B,iBAA9B,EAAiD;AAAA,SAAMF,QAAN;AAAA,CAAjD;;AAGA,IAAIG,sBAASC,EAAT,IAAe,KAAnB,EAAyB;AACrBH,2BAAYI,cAAZ,CAA2B,iBAA3B,EAA8C;AAC1CC,IAAAA,OAAO,EAAEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB;AADiC,GAA9C;AAGH;;AAAA","sourcesContent":["// imports\r\n// react as usual\r\nimport React, { useEffect, useContext } from 'react';\r\n\r\n// navigation imports\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createStackNavigator } from '@react-navigation/stack';\r\n\r\nimport { HomeFlow, AuthFlow } from './src/navigation/navigations';\r\n\r\n// context imports\r\nimport { MainContext, MainProvider } from './src/contexts/main_context';\r\n\r\n// gui just for tests\r\nimport {\r\n    StyleSheet,\r\n    Text,\r\n    View,\r\n    AppRegistry,\r\n    Platform\r\n} from \"react-native\";\r\n\r\n// if api error\r\nimport API_ErrorHandler from './src/api_handling/ErrorHandler';\r\n\r\n// app stack\r\nconst AppStack = createStackNavigator();\r\n\r\n// App function\r\nfunction App(){\r\n    // load the context state and changer(basically Context.Consumer)\r\n    const context = useContext(MainContext);\r\n\r\n    // only do this once app is done rendering\r\n    useEffect(() => {\r\n        // context action to check jwt\r\n        // and update context\r\n        context.actions.checkJWT();\r\n    }, []);\r\n\r\n    // return container, checking whether jwt exists or not\r\n    return(\r\n        <NavigationContainer>\r\n            <AppStack.Navigator>\r\n                {context.state.jwt === null || context.state.jwt === undefined? (\r\n                    <>\r\n                        {/* AuthFlow */}\r\n                        <AppStack.Screen \r\n                            options={{headerShown: false}}\r\n                            name = \"Auth\"\r\n                            component = {AuthFlow}\r\n                        />\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        {/* HomeFlow */}\r\n                        <AppStack.Screen \r\n                            options={{headerShown: false}}\r\n                            name = \"Home\"\r\n                            component = {HomeFlow}\r\n                        />\r\n                    </>\r\n                )}\r\n            </AppStack.Navigator>\r\n        </NavigationContainer>\r\n    );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n    msg: {\r\n      fontSize: 28\r\n    },\r\n    container: {\r\n      flex: 1,\r\n      justifyContent: 'center',\r\n      alignItems: 'center'\r\n    }\r\n});\r\n\r\n// full function for loading everything\r\nfunction Full_App(){\r\n    return (\r\n        <MainProvider>\r\n            <API_ErrorHandler/>\r\n            <App />\r\n        </MainProvider>\r\n    );\r\n};\r\n\r\n\r\n// expo uses this registry method instead of registry component\r\n// when app launches maybe registry component will work\r\n// registerRootComponent(App);\r\n\r\n// for web\r\nAppRegistry.registerComponent(\"Peter-First-App\", () => Full_App);\r\n\r\n\r\nif (Platform.OS == \"web\"){\r\n    AppRegistry.runApplication(\"Peter-First-App\", {\r\n        rootTag: document.getElementById('root')\r\n    });\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"script"}