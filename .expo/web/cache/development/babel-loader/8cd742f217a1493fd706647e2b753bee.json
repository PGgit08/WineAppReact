{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _storage = require(\"../storage\");\n\nvar _auth_requests = _interopRequireDefault(require(\"../api_handling/auth_requests\"));\n\nvar IdentifyUser = function IdentifyUser(dispatch) {\n  return function (jwt) {};\n};\n\nvar Context_SignIn = function Context_SignIn(dispatch) {\n  return function (_ref) {\n    var username = _ref.username,\n        password = _ref.password;\n\n    _auth_requests.default.login({\n      username: username,\n      password: password\n    }).then(function (res) {\n      console.log('ok');\n      dispatch({\n        type: 'sign_in',\n        val: res.data\n      });\n      (0, _storage.SignIn)(res.data);\n    }).catch(function (err_obj) {\n      return Backend_Update(dispatch)(err_obj);\n    });\n  };\n};\n\nvar Context_Register = function Context_Register(dispatch) {\n  return function (_ref2) {\n    var username = _ref2.username,\n        password = _ref2.password,\n        email = _ref2.email;\n\n    _auth_requests.default.register({\n      username: username,\n      password: password,\n      email: email\n    }).then(function (res) {\n      dispatch({\n        type: 'sign_in',\n        val: res.data\n      });\n      (0, _storage.SignIn)(res.data);\n    }).catch(function (err_obj) {\n      return Backend_Update(dispatch)(err_obj);\n    });\n  };\n};\n\nvar Context_SignOut = function Context_SignOut(dispatch) {\n  return function () {\n    dispatch({\n      type: 'sign_out'\n    });\n    (0, _storage.SignOut)();\n  };\n};\n\nvar checkJWT = function checkJWT(dispatch) {\n  return function () {\n    (0, _storage.Init)().then(function (val) {\n      dispatch({\n        type: 'sign_in',\n        val: val\n      });\n    }).catch(function (err) {\n      console.log(err);\n    });\n  };\n};\n\nvar setStoreId = function setStoreId(dispatch) {\n  return function (store_id) {\n    dispatch({\n      type: 'setStoreId',\n      val: store_id\n    });\n  };\n};\n\nvar Backend_Update = function Backend_Update(dispatch) {\n  return function (errorObj) {\n    dispatch({\n      type: \"Backend_Update\",\n      val: {\n        isError: errorObj.isError,\n        errorMsg: errorObj.errorMsg\n      }\n    });\n  };\n};\n\nvar Backend_Refresh = function Backend_Refresh(dispatch) {\n  return function () {\n    dispatch({\n      type: \"Backend_Refresh\"\n    });\n  };\n};\n\nvar _default = {\n  IdentifyUser: IdentifyUser,\n  Context_SignIn: Context_SignIn,\n  Context_SignOut: Context_SignOut,\n  Context_Register: Context_Register,\n  checkJWT: checkJWT,\n  setStoreId: setStoreId,\n  Backend_Update: Backend_Update,\n  Backend_Refresh: Backend_Refresh\n};\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/peter/Peter-First-App/src/contexts/main_context_actions.js"],"names":["IdentifyUser","dispatch","jwt","Context_SignIn","username","password","AUTH_API","login","then","res","console","log","type","val","data","catch","err_obj","Backend_Update","Context_Register","email","register","Context_SignOut","checkJWT","err","setStoreId","store_id","errorObj","isError","errorMsg","Backend_Refresh"],"mappings":"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","sourcesContent":["// storage imports\r\nimport {\r\n    SignIn,\r\n    SignOut,\r\n    Init\r\n} from '../storage';\r\n\r\n\r\n// api request imports\r\nimport { default as AUTH_API } from '../api_handling/auth_requests';\r\n\r\n// functions that change main_context's state\r\n// screens can import these functions really easily\r\n// and they can be used as event handlers\r\n\r\n// function to identify user based on \r\n// jwt\r\nconst IdentifyUser = dispatch => {\r\n    // send jwt as param\r\n    return (jwt) => {\r\n        // api request\r\n        // to identify person\r\n        // and get their posts + creds\r\n    };\r\n};\r\n\r\nconst Context_SignIn = dispatch => {\r\n    // return function explained in main_context\r\n    return ({username, password}) => {\r\n        // api request\r\n        // try doing log in\r\n        AUTH_API.login({username, password}).then(\r\n            (res) => {\r\n                console.log('ok');\r\n                dispatch({\r\n                    type:'sign_in',\r\n                    val: res.data\r\n                });\r\n\r\n                SignIn(res.data);\r\n            }\r\n        ).catch((err_obj) => Backend_Update(dispatch)(err_obj));\r\n    };\r\n};\r\n\r\n\r\nconst Context_Register = dispatch => {\r\n    return ({username, password, email}) => {\r\n        AUTH_API.register({username, password, email}).then(\r\n            (res) => {\r\n                dispatch({\r\n                    type: 'sign_in',\r\n                    val: res.data\r\n                });\r\n\r\n                SignIn(res.data);\r\n            }\r\n        ).catch((err_obj) => Backend_Update(dispatch)(err_obj));\r\n    };\r\n};\r\n\r\nconst Context_SignOut = dispatch => {\r\n    return () => {\r\n        // context signout\r\n        dispatch({\r\n            type: 'sign_out'\r\n        });\r\n        // storage signout\r\n        SignOut();\r\n    };\r\n};\r\n\r\nconst checkJWT = dispatch => {\r\n    return () => {\r\n        // check for token \r\n        // asyncronously\r\n        Init().then((val) => {\r\n            // even if val is null\r\n            // the jwt will still be set to null\r\n            dispatch({\r\n                type: 'sign_in',\r\n                val: val\r\n            });\r\n        }).catch((err) => {\r\n            console.log(err);\r\n        });\r\n    };\r\n};\r\n\r\nconst setStoreId = dispatch => {\r\n    return (store_id) => {\r\n        dispatch({\r\n            type: 'setStoreId',\r\n            val: store_id\r\n        });\r\n    };\r\n};\r\n\r\nconst Backend_Update = dispatch => {\r\n    return (errorObj) => {\r\n        dispatch({\r\n            type: \"Backend_Update\",\r\n            val: {\r\n                isError: errorObj.isError,\r\n                errorMsg: errorObj.errorMsg\r\n            }\r\n        });\r\n    };\r\n};\r\n\r\nconst Backend_Refresh = dispatch => {\r\n    return () => {\r\n        dispatch({\r\n            type: \"Backend_Refresh\"\r\n        });\r\n    };\r\n};\r\n\r\n// export all the functions\r\nexport default {\r\n    IdentifyUser,\r\n    Context_SignIn,\r\n    Context_SignOut,\r\n    Context_Register,\r\n    checkJWT,\r\n    setStoreId,\r\n    Backend_Update,\r\n    Backend_Refresh\r\n};"]},"metadata":{},"sourceType":"script"}