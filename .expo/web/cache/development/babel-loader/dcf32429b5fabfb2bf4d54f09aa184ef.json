{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _storage = require(\"../storage\");\n\nvar _axios = _interopRequireDefault(require(\"axios\"));\n\nvar _config = require(\"../config\");\n\nvar IdentifyUser = function IdentifyUser(dispatch) {\n  return _regenerator.default.async(function IdentifyUser$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", function (jwt) {\n            _axios.default.get(_config.AUTH_ENDPOINTS.identify, {\n              headers: {\n                'Authorization': 'Bearer ' + jwt\n              }\n            }).then(function (res) {\n              dispatch({\n                type: 'updateUser',\n                val: {\n                  username: res.data.username,\n                  email: res.data.email\n                }\n              });\n            }).catch(function (err) {\n              console.log(err);\n            });\n          });\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar Context_SignIn = function Context_SignIn(dispatch) {\n  return function (_ref) {\n    var username = _ref.username,\n        password = _ref.password;\n\n    _axios.default.get(_config.AUTH_ENDPOINTS.login, {\n      params: {\n        username: username,\n        password: password\n      }\n    }).then(function (res) {\n      (0, _storage.SignIn)(res.data);\n      dispatch({\n        type: 'sign_in',\n        val: res.data\n      });\n      IdentifyUser(dispatch)(res.data);\n    }).catch(function (err) {\n      console.log(err);\n    });\n  };\n};\n\nvar Context_Register = function Context_Register(dispatch) {\n  return function (_ref2) {\n    var username = _ref2.username,\n        password = _ref2.password,\n        email = _ref2.email;\n\n    _axios.default.get(_config.AUTH_ENDPOINTS.register, {\n      params: {\n        username: username,\n        password: password,\n        email: email\n      }\n    }).then(function (res) {\n      (0, _storage.SignIn)(res.data);\n      dispatch({\n        type: 'sign_in',\n        val: res.data\n      });\n      IdentifyUser(dispatch)(res.data);\n    }).catch(function (err) {\n      console.log(err);\n    });\n  };\n};\n\nvar Context_SignOut = function Context_SignOut(dispatch) {\n  return function (navigation) {\n    (0, _storage.SignOut)();\n    dispatch({\n      type: 'sign_out'\n    });\n  };\n};\n\nvar checkJWT = function checkJWT(dispatch) {\n  return function () {\n    (0, _storage.Init)().then(function (val) {\n      console.log(val);\n      dispatch({\n        type: 'sign_in',\n        val: val\n      });\n    }).catch(function (err) {\n      console.log(err);\n    });\n  };\n};\n\nvar setStoreId = function setStoreId(dispatch) {\n  return function (store_id) {\n    dispatch({\n      type: 'setStoreId',\n      val: store_id\n    });\n  };\n};\n\nvar _default = {\n  IdentifyUser: IdentifyUser,\n  Context_SignIn: Context_SignIn,\n  Context_SignOut: Context_SignOut,\n  Context_Register: Context_Register,\n  checkJWT: checkJWT,\n  setStoreId: setStoreId\n};\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/peter/Peter-First-App/src/contexts/main_context_actions.js"],"names":["IdentifyUser","dispatch","jwt","axios","get","AUTH_ENDPOINTS","identify","headers","then","res","type","val","username","data","email","catch","err","console","log","Context_SignIn","password","login","params","Context_Register","register","Context_SignOut","navigation","checkJWT","setStoreId","store_id"],"mappings":"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","sourcesContent":["// storage imports\r\nimport {\r\n    SignIn,\r\n    SignOut,\r\n    Init\r\n} from '../storage';\r\n\r\n// api axios import\r\nimport axios from 'axios';\r\n\r\n// config urls\r\nimport { AUTH_ENDPOINTS } from '../config';\r\n\r\n// functions that change main_context's state\r\n// screens can import these functions really easily\r\n// and they can be used as event handlers\r\n\r\n// function to identify user based on \r\n// jwt\r\nconst IdentifyUser = async dispatch => {\r\n    // send jwt as param\r\n    return (jwt) => {\r\n        // api request\r\n        // to identify person\r\n        axios.get(AUTH_ENDPOINTS.identify, {\r\n            headers: {\r\n                'Authorization': 'Bearer ' + jwt\r\n            }\r\n        }).then(\r\n            (res) => {\r\n                dispatch({\r\n                    type: 'updateUser',\r\n                    val: {\r\n                        username: res.data.username,\r\n                        email: res.data.email\r\n                    }\r\n                });\r\n            }\r\n        ).catch(\r\n            (err) => {console.log(err)}\r\n        );\r\n    };\r\n};\r\n\r\nconst Context_SignIn = dispatch => {\r\n    // return function explained in main_context\r\n    return ({username, password}) => {\r\n        // api request\r\n        // try doing log in\r\n        axios.get(AUTH_ENDPOINTS.login, {\r\n            params: {\r\n                username: username, \r\n                password: password\r\n            }\r\n        }).then(\r\n            (res) => {\r\n                // storage sign in\r\n                SignIn(res.data);\r\n                \r\n                // change context state\r\n                dispatch({\r\n                    type: 'sign_in',\r\n                    val: res.data\r\n                });\r\n                // identify user\r\n                IdentifyUser(dispatch)(res.data);\r\n            }\r\n        ).catch(\r\n            (err) => {console.log(err)}\r\n        );\r\n    };\r\n};\r\n\r\n\r\nconst Context_Register = dispatch => {\r\n    return ({username, password, email}) => {\r\n        // api request\r\n        // try doing register\r\n        axios.get(AUTH_ENDPOINTS.register, {\r\n            params: {\r\n                username: username, \r\n                password: password,\r\n                email: email\r\n            }\r\n        }).then(\r\n            (res) => {\r\n                // storage sign in\r\n                SignIn(res.data);\r\n                \r\n                // change context state\r\n                dispatch({\r\n                    type: 'sign_in',\r\n                    val: res.data\r\n                });\r\n                // identify user\r\n                IdentifyUser(dispatch)(res.data);\r\n            }\r\n        ).catch(\r\n            (err) => {console.log(err)}\r\n        );\r\n    };\r\n};\r\n\r\nconst Context_SignOut = dispatch => {\r\n    return (navigation) => {\r\n        // storage signout\r\n        SignOut();\r\n        // context signout\r\n        dispatch({\r\n            type: 'sign_out'\r\n        });\r\n    };\r\n};\r\n\r\nconst checkJWT = dispatch => {\r\n    return () => {\r\n        // check for token \r\n        // asyncronously\r\n        Init().then((val) => {\r\n            // even if val is null\r\n            // the jwt will still be set to null\r\n            console.log(val);\r\n            dispatch({\r\n                type: 'sign_in',\r\n                val: val\r\n            });\r\n        }).catch((err) => {\r\n            console.log(err);\r\n        });\r\n    };\r\n};\r\n\r\nconst setStoreId = dispatch => {\r\n    return (store_id) => {\r\n        dispatch({\r\n            type: 'setStoreId',\r\n            val: store_id\r\n        });\r\n    };\r\n};\r\n\r\n\r\n// export all the functions\r\nexport default {\r\n    IdentifyUser,\r\n    Context_SignIn,\r\n    Context_SignOut,\r\n    Context_Register,\r\n    checkJWT,\r\n    setStoreId\r\n};"]},"metadata":{},"sourceType":"script"}